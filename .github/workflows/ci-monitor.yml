name: CI Monitor

on:
  workflow_run:
    workflows: ["Ironclad CI", "CodeQL"]
    types: [requested, completed]

permissions:
  contents: read
  pull-requests: write

jobs:
  update-pr-comment:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.event == 'pull_request' }}
    steps:
      - name: Build CI status and update PR comment
        uses: actions/github-script@v7
        with:
          script: |
            const run = context.payload.workflow_run;
            const prs = run.pull_requests || [];
            if (prs.length === 0) {
              core.info('No linked PRs for this run.');
              return;
            }
            const prNumber = prs[0].number;
            const sha = run.head_sha;
            // Collect check runs for this SHA
            const checks = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: sha,
              per_page: 100,
            });
            // Build a compact table
            const rows = checks.data.check_runs.map(cr => {
              const status = cr.status === 'completed' ? (cr.conclusion || 'â€”') : cr.status;
              const url = cr.html_url || cr.details_url || '';
              return `| ${cr.name} | ${status} | [logs](${url}) |`;
            }).join('\n');
            const header = `| Check | Status | Logs |\n|---|---|---|`;
            const body = `<!-- ci-monitor:do-not-remove -->\n**CI Status (run: ${run.name})**\n\nCommit: \\`${sha.slice(0,7)}\\`\n\n${header}\n${rows}`;
            // Find existing comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              per_page: 100,
            });
            const existing = comments.data.find(c => c.body && c.body.includes('<!-- ci-monitor:do-not-remove -->'));
            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body,
              });
              core.info(`Updated CI monitor comment on PR #${prNumber}`);
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body,
              });
              core.info(`Created CI monitor comment on PR #${prNumber}`);
            }
